package com.certoclav.certoscale.database;


import com.certoclav.certoscale.supervisor.ApplicationManager;
import com.certoclav.library.application.ApplicationController;
import com.j256.ormlite.field.DataType;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;


@DatabaseTable(tableName = "protocol")
public class Protocol {

    private static final String JSON_CONTENT_STRING = "content";
    private final static String JSON_CONTENT_JSON = "content_json";
    private final static String JSON_DEVICE_KEY = "devicekey";
    private final static String JSON_DATE = "date";
    private final static String JSON_VISIBILITY = "visibility";
    private final static String JSON_NAME = "name";
    private final static String JSON_CLOUD_ID = "_id"; //user db id from MongoDb
    private final static String JSON_USER_EMAIL = "email";
    private final static String JSON_SIGNATURE = "signature";

    //additional for ash_determinatin_ticket_system
    private final static String JSON_ASH_SAMPLE_NAME = "ash_name_sample";
    private final static String JSON_ASH_BEAKER_NAME = "ash_name_beaker";
    private final static String JSON_ASH_ARRAY_GLOW_WEIGHTS = "ash_array_glow_weights";
    private final static String JSON_ASH_ARRAY_GLOW_WEIGHTS_USERS = "ash_array_glow_weights_users";
    private final static String JSON_ASH_WEIGHT_BEAKER = "ash_weight_beaker";
    private final static String JSON_ASH_WEIGHT_BEAKER_WITH_SAMPLE = "ash_weight_beaker_with_sample";
    private final static String JSON_OVEN_TEMPERATURE = "ash_oven_temperature";
    private final static String JSON_IS_PENDING = "ispending";


    private String name = "";
    private String userEmail = "";
    private String deviceKey = "";
    private String visibility = "global";
    private String content = "";
    private String date = "";
    private String cloudId = "";
    private String contentJson = "";
    private double ovenTemperature = 0;
    private double recentWeight = 0;

    public String getAshSampleName() {
        return ashSampleName;
    }

    public void setAshSampleName(String ashSampleName) {
        this.ashSampleName = ashSampleName;
    }

    public String getAshBeakerName() {
        return ashBeakerName;
    }

    public void setAshBeakerName(String ashBeakerName) {

        this.ashBeakerName = ashBeakerName;
    }


    public void saveIntoDb() {
        DatabaseService db = new DatabaseService(ApplicationController.getContext());
        db.deleteProtocol(this);
        db.insertProtocol(this);
    }

    public List<Double> getAshArrayGlowWeights() {
        return ashArrayGlowWeights;
    }

    public Double getAshArrayGlowWeightsDifference() {
        if (getAshArrayGlowWeights().size() >= 2) {
            int lastIndex = getAshArrayGlowWeights().size() - 1;
            return getAshArrayGlowWeights().get(lastIndex) - getAshArrayGlowWeights().get(lastIndex - 1);
        }
        return -1d;
    }


    public void setAshArrayGlowWeights(List<Double> ashArrayGlowWeights) {
        this.ashArrayGlowWeights = ashArrayGlowWeights;
    }


    public Double getBeakerWeight() {
        return ashWeightBeaker;
    }

    public void saveBeakerWeight(Double ashWeightBeaker) {
        this.ashWeightBeaker = ashWeightBeaker;
    }

    public Double getAshWeightBeakerWithSample() {
        return ashWeightBeakerWithSample;
    }

    public Double getSampleWeight() {
        return ashWeightBeakerWithSample-ashWeightBeaker;
    }

    public void saveBeakerAndSampleWeight(Double ashWeightBeakerWithSample) {
        this.ashWeightBeakerWithSample = ashWeightBeakerWithSample;
    }

    private String ashSampleName = "";
    private String ashBeakerName = "";
    private List<Double> ashArrayGlowWeights = new ArrayList<Double>();
    private List<String> ashArrayGlowWeightsUser = new ArrayList<String>();
    private Double ashWeightBeaker = 0d;
    private Double ashWeightBeakerWithSample = 0d;

    public Boolean getIsPending() {
        return isPending;
    }

    public void setPending(Boolean isPending) {
        this.isPending = isPending;
    }

    private Boolean isPending = true;


    @DatabaseField(columnName = JSON_SIGNATURE, dataType = DataType.STRING_BYTES)
    private String signature;


    public String getProtocolJson() {
        generateJson();
        return protocolJson;
    }


    @DatabaseField(generatedId = true, columnName = "protocol_id")
    private int item_id;

    @DatabaseField(columnName = "protocol_json")
    private String protocolJson;


    public String getDate() {
        return this.date;
    }

    public void setDate(String date) {
        this.date = date;
    }


    // id is generated by the database and set on the object automatically


    public Protocol() {

    }

    public Protocol(String protocolJson) {
        setProtocolJson(protocolJson);
        this.protocolJson = protocolJson;
    }


    public void setProtocolJson(String itemJson) {
        this.protocolJson = itemJson;
        parseJson();
    }

    public void parseJson() {

        JSONObject jsonObject = null;
        try {
            jsonObject = new JSONObject(protocolJson);
        } catch (Exception e) {
            return;
        }

        try {
            name = jsonObject.getString(JSON_NAME);
        } catch (Exception e) {
            name = "";
        }
        try {
            userEmail = jsonObject.getString(JSON_USER_EMAIL);
        } catch (Exception e) {
            userEmail = "";
        }

        try {
            visibility = jsonObject.getString(JSON_VISIBILITY);
        } catch (Exception e) {
            visibility = "private";
        }


        try {
            date = jsonObject.getString(JSON_DATE);
        } catch (Exception e) {
            date = "";
        }


        try {
            deviceKey = jsonObject.getString(JSON_DEVICE_KEY);
        } catch (Exception e) {
            deviceKey = "";
        }


        try {
            cloudId = jsonObject.getString(JSON_CLOUD_ID);
        } catch (Exception e) {
            cloudId = "";
        }

        try {
            content = jsonObject.getString(JSON_CONTENT_STRING);
        } catch (Exception e) {
            content = "";
        }
        try {
            signature = jsonObject.getString(JSON_SIGNATURE);

        } catch (Exception e) {
            signature = "";
        }

        try {
            content = jsonObject.getString(JSON_CONTENT_STRING);
        } catch (Exception e) {
            content = "";
        }


        try {
            ashSampleName = jsonObject.getString(JSON_ASH_SAMPLE_NAME);
        } catch (Exception e) {
            ashSampleName = "";
        }

        try {
            ashBeakerName = jsonObject.getString(JSON_ASH_BEAKER_NAME);
        } catch (Exception e) {
            ashBeakerName = "";
        }

        ashArrayGlowWeights.clear();
        JSONArray jsonArray = new JSONArray();

        try {
            jsonArray = jsonObject.getJSONArray(JSON_ASH_ARRAY_GLOW_WEIGHTS);
        } catch (Exception e) {
            jsonArray = new JSONArray();
        }


        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject glowWeightsEntry = new JSONObject();
            Double glowWeight = 0d;
            try {
                glowWeight = Double.valueOf(jsonArray.get(i).toString());
            } catch (Exception e) {
                e.printStackTrace();
                android.util.Log.e("musaqil",i+"");
                glowWeight = 0d;
            }
            ashArrayGlowWeights.add(glowWeight);
        }


        try {
            ashWeightBeaker = jsonObject.getDouble(JSON_ASH_WEIGHT_BEAKER);
        } catch (Exception e) {
            ashWeightBeaker = 0d;
        }

        try {
            ashWeightBeakerWithSample = jsonObject.getDouble(JSON_ASH_WEIGHT_BEAKER_WITH_SAMPLE);
        } catch (Exception e) {
            ashWeightBeakerWithSample = 0d;
        }

        try {
            isPending = jsonObject.getBoolean(JSON_IS_PENDING);
        } catch (Exception e) {
            isPending = false;
        }

        try {
            ovenTemperature = jsonObject.getDouble(JSON_OVEN_TEMPERATURE);
        } catch (Exception e) {
            ovenTemperature = 0d;
        }


        ashArrayGlowWeightsUser.clear();
        jsonArray = new JSONArray();

        try {
            jsonArray = jsonObject.getJSONArray(JSON_ASH_ARRAY_GLOW_WEIGHTS_USERS);
        } catch (Exception e) {
            jsonArray = new JSONArray();
        }


        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject glowWeightsEntry = new JSONObject();
            String username = "";
            try {
                username = (String) jsonArray.get(i);
            } catch (Exception e) {
                username = "";
            }
            ashArrayGlowWeightsUser.add(username);
        }

        protocolJson = jsonObject.toString();

    }


    public Protocol(String cloudId, String protocolJson) {
        this.cloudId = cloudId;
        this.protocolJson = protocolJson;
    }

    public Protocol(String cloudId, String name, String userEmail, String deviceKey, String date, String visibility, String content, String signature) {
        this.cloudId = cloudId;
        this.name = name;
        this.userEmail = userEmail;
        this.deviceKey = deviceKey;
        this.date = date;
        this.visibility = visibility;
        this.content = content;
        this.signature = signature;
    }


    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getUserEmail() {
        return userEmail;
    }

    public void setUserEmail(String userEmail) {
        this.userEmail = userEmail;
    }

    public String getDeviceKey() {
        return deviceKey;
    }

    public void setDeviceKey(String deviceKey) {
        this.deviceKey = deviceKey;
    }

    public String getVisibility() {
        return visibility;
    }

    public void setVisibility(String visibility) {
        this.visibility = visibility;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public void setItem_id(int item_id) {
        this.item_id = item_id;
    }

    public String getCloudId() {
        return cloudId;
    }

    public void setCloudId(String cloudId) {
        this.cloudId = cloudId;
    }

    public String getSignature() {
        return signature;
    }

    public void setSignature(String signature) {
        this.signature = signature;
    }


    public void generateJson() {
        JSONObject jsonObject = new JSONObject();

        try {
            jsonObject.put(JSON_CLOUD_ID, cloudId)
                    .put(JSON_NAME, name)
                    .put(JSON_DEVICE_KEY, deviceKey)
                    .put(JSON_DATE, date)
                    .put(JSON_USER_EMAIL, userEmail)
                    .put(JSON_VISIBILITY, visibility)
                    .put(JSON_CONTENT_STRING, content)
                    .put(JSON_SIGNATURE, signature)
                    .put(JSON_ASH_SAMPLE_NAME, ashSampleName)
                    .put(JSON_ASH_BEAKER_NAME, ashBeakerName)
                    .put(JSON_ASH_WEIGHT_BEAKER, ashWeightBeaker)
                    .put(JSON_ASH_WEIGHT_BEAKER_WITH_SAMPLE, ashWeightBeakerWithSample)
                    .put(JSON_IS_PENDING, isPending)
                    .put(JSON_OVEN_TEMPERATURE, ovenTemperature);

            JSONArray jsonArrayGlowWeights = new JSONArray();
            for (Double value : ashArrayGlowWeights) {
                jsonArrayGlowWeights.put(value);
            }
            jsonObject.put(JSON_ASH_ARRAY_GLOW_WEIGHTS, jsonArrayGlowWeights);


            JSONArray jsonArrayGlowWeightsUsers = new JSONArray();
            for (String value : ashArrayGlowWeightsUser) {
                jsonArrayGlowWeightsUsers.put(value);
            }
            jsonObject.put(JSON_ASH_ARRAY_GLOW_WEIGHTS_USERS, jsonArrayGlowWeightsUsers);


        } catch (Exception e) {
            e.printStackTrace();
        }
        protocolJson = jsonObject.toString();
    }

    public String generateCSV() {
        parseJson();
        return content.replaceAll(": ",",").replaceAll(":",",");
    }

    public Double getLastGlowWeight() {
        if (getAshArrayGlowWeights().size() > 0)
            return ashArrayGlowWeights.get(ashArrayGlowWeights.size() - 1);
        else
            return -1d;
    }

    public Double getAshResultInGram() {
        try {
            Double weightWetSample = ashWeightBeakerWithSample - ashWeightBeaker;
            Double weightDrySample = getLastGlowWeight() - ashWeightBeaker;

            return weightDrySample;
        } catch (Exception e) {
            return 0d;
        }

    }

    public Double getAshResultInPercent() {
        try {
            Double weightWetSample = ashWeightBeakerWithSample - ashWeightBeaker;
            Double weightDrySample = getLastGlowWeight() - ashWeightBeaker;
            Double result = (weightDrySample / weightWetSample) * 100.0;
            return result;
        } catch (Exception e) {
            return 0d;
        }

    }

    public String getAshResultPercentageAsString() {
        try {
            Double weightWetSample = ashWeightBeakerWithSample - ashWeightBeaker;
            Double weightDrySample = getLastGlowWeight() - ashWeightBeaker;
            Double result = (weightDrySample / weightWetSample) * 100.0;
            return ApplicationManager.getInstance().getTransformedWeightAsString(result.doubleValue());
        } catch (Exception e) {
            return "";
        }

    }

    public double getOvenTemperature() {
        return ovenTemperature;
    }

    public void setOvenTemperature(double ovenTemperature) {
        this.ovenTemperature = ovenTemperature;
    }

    public double getRecentWeight(boolean current) {
        List<Double> weights = ApplicationManager.getInstance().getCurrentProtocol().getAshArrayGlowWeights();

        for(Double w:weights)
            android.util.Log.e("weightash",w+"");

        if(!current)
            if( weights.size()==1)
                return ApplicationManager.getInstance().getCurrentProtocol().getAshWeightBeakerWithSample();
            else
                return weights.get(weights.size()-2);


        return weights.get(weights.size()-1);
    }

    public void abortLastWeight() {
        List<Double> weights = ApplicationManager.getInstance().getCurrentProtocol().getAshArrayGlowWeights();
        List<String> weightsUsers = ApplicationManager.getInstance().getCurrentProtocol().getAshArrayGlowWeightsUser();

        if(weights.size()>0)
            weights.remove(weights.size()-1);

        if(weightsUsers.size()>0)
            weightsUsers.remove(weightsUsers.size()-1);
    }

    public void setRecentWeight(double recentWeight) {
        this.recentWeight = recentWeight;
    }

    public List<String> getAshArrayGlowWeightsUser() {
        return ashArrayGlowWeightsUser;
    }
}



