package com.certoclav.certoscale.database;


import android.util.Log;

import com.certoclav.certoscale.model.RecipeEntry;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;


/*
{
    "status": 200,
    "ispremium": true,
    "recipes": [
        {
            "_id": "58a1c3fff36d2837a7c743ea",
            "name": "Saline solution",
            "userid": "5881ecd10869c7247c4898e2",
            "devicekey": "93943649346387463",
            "date": "2014-06-25T00:00:00.000Z",
            "visibility": "global",
            "steps": [
                {
                    "step": 1,
                    "artno": "",
                    "description": "",
                    "weight": 0,
                    "unit": "",
                    "instruction": "Please empty the pan an press TARE button"
                },
                {
                    "step": 2,
                    "artno": "",
                    "description": "",
                    "weight": 0,
                    "unit": "",
                    "instruction": "Please put an empty 300ml glass on top of the pan"
                },
                {
                    "step": 3,
                    "artno": "12345ZZ",
                    "description": "H2O",
                    "weight": 2,
                    "unit": "g",
                    "instruction": "Please fill in H2O and press NEXT button"
                },
                {
                    "step": 4,
                    "artno": "asdf67",
                    "description": "NaCl",
                    "weight": 48,
                    "unit": "g",
                    "instruction": "Please fill in NaCl and press DONE button"
                }
            ]
        },
 */

/**
 * A simple demonstration object we are creating and persisting to the database.
 */

@DatabaseTable(tableName = "recipe")
public class Recipe {

	// id is generated by the database and set on the object automatically


	Recipe(){

	}


	private final static String JSON_CLOUD_ID = "_id";
	private final static String JSON_NAME = "name";
	private final static String JSON_USER_EMAIL = "email";
	private final static String JSON_USER_ID = "userid";
	private final static String JSON_DEVICE_KEY = "devicekey";
	private final static String JSON_DATE = "date";
	private final static String JSON_VISIBILITY = "visibility";
	private final static String JSON_ENTRIES = "steps";
	private final static String JSON_ENTRY_STEP = "step";
	private final static String JSON_ENTRY_ARTICLE_NUMBER = "artno";
	private final static String JSON_ENTRY_DESCRIPTION = "description";
	private final static String JSON_ENTRY_WEIGHT = "weight";
	private final static String JSON_ENTRY_MEASURED_WEIGHT = "weight";
	private final static String JSON_ENTRY_UNIT = "unit";
	private final static String JSON_ENTRY_INSTRUCTION = "instruction";

	private String userid="";
	private String userEmail = "";
	private String cloudId = "";
	private String name = "";
	private String date = "";
	private String description = "";
	private String deviceKey = "";
	private String visibility = "private";
	private List<RecipeEntry> recipeEntries = new ArrayList<RecipeEntry>();
	private String recipeName = "";





	public String getRecipeJson() {
		generateJson();
		return recipeJson;
	}


	@DatabaseField(generatedId = true, columnName = "recipe_id")
	private int recipe_id;

	@DatabaseField(columnName = "recipe_json")
	private String recipeJson;



	public int getRecipe_id() {
		return recipe_id;
	}





	public void parseJson(){

		JSONObject jsonObject = null;
		recipeEntries.clear();

		try {
			jsonObject = new JSONObject(recipeJson);
		}catch (Exception e){
			return;
		}

		try {
			cloudId = jsonObject.getString(JSON_CLOUD_ID);
		}catch (Exception e){
			cloudId = "";
		}

		try {
			name = jsonObject.getString(JSON_NAME);
		}catch (Exception e){
			name = "";
		}

		try {
			userEmail = jsonObject.getString(JSON_USER_EMAIL);
		}catch (Exception e){
			userEmail = "";
		}

		try {
			deviceKey = jsonObject.getString(JSON_DEVICE_KEY);
		}catch (Exception e){
			deviceKey = "";
		}

		try {
			date = jsonObject.getString(JSON_DATE);
		}catch (Exception e){
			date = "";
		}

		try {
			visibility = jsonObject.getString(JSON_VISIBILITY);
		}catch (Exception e){
			visibility = "private";
		}


		try {
			JSONArray jsonArray = jsonObject.getJSONArray(JSON_ENTRIES);
			for(int i = 0; i< jsonArray.length();i++){
				JSONObject recipeEntry = (JSONObject) jsonArray.get(i);
				Integer step = 0;
				try{
					recipeEntry.getString(JSON_ENTRY_STEP);
				}catch (Exception e){
					step = 0;
				}

				String unit = "";
				try{
					recipeEntry.getString(JSON_ENTRY_UNIT);
				}catch (Exception e){
					unit = "";
				}

				String instruction = "";
				try{
					recipeEntry.getString(JSON_ENTRY_INSTRUCTION);
				}catch (Exception e){
					instruction = "";
				}

				String articleNumber = "";
				try{
					recipeEntry.getString(JSON_ENTRY_ARTICLE_NUMBER);
				}catch (Exception e){
					articleNumber = "";
				}

				Double weight = 0d;
				try{
					recipeEntry.getString(JSON_ENTRY_WEIGHT);
				}catch (Exception e){
					weight = 0d;
				}

				Double measuredWeight = 0d;
				try{
					recipeEntry.getString(JSON_ENTRY_MEASURED_WEIGHT);
				}catch (Exception e){
					measuredWeight = 0d;
				}

				String description = "";
				try{
					recipeEntry.getString(JSON_ENTRY_DESCRIPTION);
				}catch (Exception e){
					description = "";
				}

				recipeEntries.add(new RecipeEntry(description,weight,step,articleNumber,unit,instruction,measuredWeight));


			}
		}catch (Exception e){

		}



		recipeJson = jsonObject.toString();

	}


	public Recipe(String cloudId, String recipeName, List<RecipeEntry> entries) {
		this.cloudId = cloudId;
		this.recipeName = recipeName;
		this.recipeEntries = entries;
	}



	public Recipe(String recipeJson) {
		Log.e("Recipe.java", "constructor new Recipe recipeJson:" + recipeJson);
		setRecipeJson(recipeJson);
		this.recipeJson = recipeJson;
	}

	public void setRecipeJson(String recipeJson) {
		this.recipeJson = recipeJson;
		parseJson();
	}



	public String getCloudId() {
		return cloudId;
	}

	public void setCloudId(String cloudId) {
		this.cloudId = cloudId;
	}

	public List<RecipeEntry> getRecipeEntries() {
		return recipeEntries;
	}

	public void setRecipeEntries(List<RecipeEntry> recipeEntries) {
		this.recipeEntries = recipeEntries;
	}

	public String getRecipeName() {
		return recipeName;
	}

	public void setRecipeName(String recipeName) {
		this.recipeName = recipeName;
	}





	/**
	 * This function must be called before inserting the Recipe into the Database DatabaseService.insertRecipe()
	 */
	public void generateJson(){
		JSONObject jsonObjectRecipe = new JSONObject();
		try {
			JSONArray jsonArrayRecipeEntries = new JSONArray();

				for (RecipeEntry entry : recipeEntries) {
					jsonArrayRecipeEntries.put(new JSONObject()
							.put(JSON_ENTRY_STEP,entry.getStep())
							.put(JSON_ENTRY_DESCRIPTION, entry.getDescription())
							.put(JSON_ENTRY_WEIGHT, entry.getWeight())
							.put(JSON_ENTRY_MEASURED_WEIGHT,entry.getMeasuredWeight())
							.put(JSON_ENTRY_ARTICLE_NUMBER,entry.getArticleNumber())
							.put(JSON_ENTRY_INSTRUCTION,entry.getInstruction())
							.put(JSON_ENTRY_UNIT,entry.getUnit())
					);
				}

			jsonObjectRecipe.put(JSON_NAME, recipeName);
			jsonObjectRecipe.put(JSON_CLOUD_ID,cloudId);
			jsonObjectRecipe.put(JSON_USER_ID,userid);
			jsonObjectRecipe.put(JSON_DATE,date);
			jsonObjectRecipe.put(JSON_USER_EMAIL,userEmail);
			jsonObjectRecipe.put(JSON_VISIBILITY,visibility);
			jsonObjectRecipe.put(JSON_DEVICE_KEY,deviceKey);
			jsonObjectRecipe.put(JSON_ENTRIES,jsonArrayRecipeEntries);

		}catch (Exception e){

		}

		this.recipeJson = jsonObjectRecipe.toString();
	}




	public double getRecipeTotalWeight(){

		double totalTarget=0;
		for(int i=0;i<getRecipeEntries().size();i++){
			totalTarget = totalTarget + getRecipeEntries().get(i).getWeight();
		}

		return totalTarget;
	}










}




