package com.certoclav.certoscale.database;


import android.util.Log;

import com.certoclav.certoscale.model.RecipeEntry;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/**
 * A simple demonstration object we are creating and persisting to the database.
 */
@DatabaseTable(tableName = "recipe")
public class Recipe {

	// id is generated by the database and set on the object automatically


	Recipe(){

	}


	public int getRecipe_id() {
		return recipe_id;
	}

	@DatabaseField(generatedId = true, columnName = "recipe_id")
	private int recipe_id;

	@DatabaseField(columnName = "recipe_json")
	private String recipeJson;

	@DatabaseField(columnName = "cloud_id")
	private String cloudId;

	private List<RecipeEntry> recipeEntries = new ArrayList<RecipeEntry>();
	private String recipeName = "";

	public Recipe(String cloudId, String recipeName, List<RecipeEntry> entries) {
		this.cloudId = cloudId;
		this.recipeName = recipeName;
		this.recipeEntries = entries;
	}

	public String getCloudId() {
		return cloudId;
	}

	public void setCloudId(String cloudId) {
		this.cloudId = cloudId;
	}

	public List<RecipeEntry> getRecipeEntries() {
		return recipeEntries;
	}

	public void setRecipeEntries(List<RecipeEntry> recipeEntries) {
		this.recipeEntries = recipeEntries;
	}

	public String getRecipeName() {
		return recipeName;
	}

	public void setRecipeName(String recipeName) {
		this.recipeName = recipeName;
	}

	/**
	 * This function must be called before inserting the Recipe into the Database DatabaseService.insertRecipe()
	 */
	public void generateRecipeJson(){

		JSONObject jsonObjectRecipe = new JSONObject();
		try {
			JSONArray jsonArrayRecipeEntries = new JSONArray();
			for (RecipeEntry entry : recipeEntries) {
				jsonArrayRecipeEntries.put(new JSONObject().put("name", entry.getName()).put("weight", entry.getWeight()).put("measuredWeight",entry.getMeasuredWeight()));
			}
			jsonObjectRecipe.put("recipeName", recipeName);
			jsonObjectRecipe.put("recipeEntries",jsonArrayRecipeEntries);
		}catch (Exception e){
			e.printStackTrace();
		}

		this.recipeJson = jsonObjectRecipe.toString();
	}








	public void parseRecipeJson(){
		try {
			JSONObject recipeJson = new JSONObject(this.recipeJson);
			recipeName = recipeJson.getString("recipeName");
		}catch (Exception e){
			e.printStackTrace();
		}

		recipeEntries = new ArrayList<RecipeEntry>();
		try {
			JSONObject jsonObjectRecipe = new JSONObject(recipeJson);
			JSONArray jsonArrayEntries = jsonObjectRecipe.getJSONArray("recipeEntries");
			for(int i = 0; i< jsonArrayEntries.length(); i++){
				recipeEntries.add(new RecipeEntry(jsonArrayEntries.getJSONObject(i).getString("name"),jsonArrayEntries.getJSONObject(i).getDouble("weight"),jsonArrayEntries.getJSONObject(i).getDouble("measuredWeight")));
			}
		}catch (Exception e){
			Log.e("Recipe", "error reading recipe entries" + e.toString());
			recipeEntries = new ArrayList<RecipeEntry>();
		}


	}





}




